#pragma checksum "C:\Users\harut\OneDrive\Рабочий стол\gas.station\src\Gas.Admin\Views\Shared\Item\_XhrScripts.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a818dffbea3e2b3a7214210cc9f15042d8ec1020"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared_Item__XhrScripts), @"mvc.1.0.view", @"/Views/Shared/Item/_XhrScripts.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\harut\OneDrive\Рабочий стол\gas.station\src\Gas.Admin\Views\_ViewImports.cshtml"
using Gas.Admin;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\harut\OneDrive\Рабочий стол\gas.station\src\Gas.Admin\Views\_ViewImports.cshtml"
using Gas.Admin.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a818dffbea3e2b3a7214210cc9f15042d8ec1020", @"/Views/Shared/Item/_XhrScripts.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5a67073476b22c37699e082863fa1a91950662fe", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared_Item__XhrScripts : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<script>
$(document).ready(function() {
    // post service
    
    /*****Main Function******/
    window.postServiceClass = function () {
        var self = this;
        self.loaderWidget = null;
        self.divClass = 'loaderClass';
        self.partialXHRList = [];
        
        // Json Post With return Datatype json
        self.postJsonReturn = function (data, url, callback) {
            if (typeof url != 'undefined') {
                try {
                    // enable loader
                    self.loaderWidget = _core.getService('Loading').Service;
                    self.loaderWidget.enableBlur(self.divClass);
    
                    $.ajax({
                        type: ""POST"",
                        url: url,
                        dataType: 'text',
                        beforeSend: function (xhr) { // for ASP.NET auto deserialization
                            xhr.setRequestHeader(""Content-type"", ""application/json"");
                        },
           ");
            WriteLiteral(@"             data: data,
                        statusCode: {
                            401: function () {
                                location.reload();
                            }
                        },
                        success: function (res, textStatus, xhr) {
                            // disable loader
                            self.loaderWidget = _core.getService('Loading').Service;
    
                            callback(JSON.parse(res));
                        },
                        error: function (xhr, textStatus, err) {
                            // disable loader
                            self.loaderWidget = _core.getService('Loading').Service;
    
                            callback(null);
                        }
                    });
                } catch (err) {
                    //console.log(err);
                    callback(null);
                }
            }
            else {
                console.log('error', 'unde");
            WriteLiteral(@"fined parameter (plugins.post)');
                callback(null);
            }
        };
    
        // Json Post
        self.post = function (data, url, callback) {
            if (typeof url != 'undefined') {
                try {
                    $.ajax({
                        type: ""POST"",
                        url: url,
                        dataType: 'text',
                        data: data,
                        statusCode: {
                            401: function () {
                                location.reload();
                            }
                        },
                        success: function (res, textStatus, xhr) {
                            callback(res);
                        },
                        error: function (xhr, textStatus, err) {
                            callback(null);
                        }
                    });
                } catch (err) {
                    //console.log(err);
                   ");
            WriteLiteral(@" callback(null);
                }
            }
            else {
                console.log('error', 'undefined parameter (plugins.post)');
                callback(null);
            }
        }
    
        // Json Post
        self.postJson = function (data, url, callback) {
            if (typeof data != 'undefined' && typeof url != 'undefined') {
                try {
                    // enable loader
                    //self.loaderWidget = _core.getService('Loading').Service;
                    //self.loaderWidget.enableBlur(self.divClass);
    
                    $.ajax({
                        type: ""POST"",
                        url: url,
                        dataType: 'text',
                        beforeSend: function (xhr) { // for ASP.NET auto deserialization
                            xhr.setRequestHeader(""Content-type"", ""application/json"");
                        },
                        data: JSON.stringify(data),
                        statusCode");
            WriteLiteral(@": {
                            401: function () {
                                location.reload();
                            }
                        },
                        success: function (res, textStatus, xhr) {
                            // disable loader
                            //self.loaderWidget = _core.getService('Loading').Service;
    
                            callback(JSON.parse(res));
                        },
                        error: function (xhr, textStatus, err) {
                            // disable loader
                            self.loaderWidget = _core.getService('Loading').Service;
    
                            callback(null);
                        }
                    });
                } catch (err) {
                    //console.log(err);
                    callback(null);
                }
            }
            else {
                console.log('error', 'undefined parameter (plugins.post)');
                callbac");
            WriteLiteral(@"k(null);
            }
        }
    
        // Json Post
        self.postJsonAsync = function (data, url, callback) {
    
            return new Promise(function (resolve, reject) {
                if (typeof data != 'undefined' && typeof url != 'undefined') {
                    try {
                        // enable loader
                        //self.loaderWidget = _core.getService('Loading').Service;
                        //self.loaderWidget.enableBlur(self.divClass);
    
                        $.ajax({
                            type: ""POST"",
                            url: url,
                            dataType: 'text',
                            beforeSend: function (xhr) { // for ASP.NET auto deserialization
                                xhr.setRequestHeader(""Content-type"", ""application/json"");
                            },
                            data: JSON.stringify(data),
                            statusCode: {
                                401: fu");
            WriteLiteral(@"nction () {
                                    location.reload();
                                }
                            },
                            success: function (res, textStatus, xhr) {
                                // disable loader
                                //self.loaderWidget = _core.getService('Loading').Service;
                                resolve(JSON.parse(res));
                            },
                            error: function (xhr, textStatus, err) {
                                // disable loader
                                self.loaderWidget = _core.getService('Loading').Service;
    
                                reject(JSON.parse(err));
                            }
                        });
                    } catch (err) {
                        //console.log(err);
                        callback(null);
                    }
                } else {
                    console.log('error', 'undefined parameter (plugins.post");
            WriteLiteral(@")');
                    callback(null);
                }
            });
        };
    
        // post Partial
        self.postPartial = function (data, url, callback) {
            if (typeof data != 'undefined' && typeof url != 'undefined') {
                try {
                    var xhr = $.ajax({
                        type: ""POST"",
                        url: url,
                        dataType: 'text',
                        beforeSend: function (xhr) { // for ASP.NET auto deserialization
                            xhr.setRequestHeader(""Content-type"", ""application/json"");
                        },
                        data: JSON.stringify(data),
                        statusCode: {
                            401: function () {
                                location.reload();
                            }
                        },
                        success: function (res, textStatus, xhr) {
                            // clean list
                  ");
            WriteLiteral(@"          cleanPartialList();
    
                            // callback
                            callback(res);
                        },
                        error: function (xhr, textStatus, err) {
                            // clean list
                            cleanPartialList();
    
                            // callback
                            callback(null);
                        }
                    });
                    
                    // clean list and push in new xhr
                    cleanPartialList();
                    self.partialXHRList.push(xhr);
                } catch (err) {
                    //console.log(err);
                    callback(null);
                }
            }
            else {
                console.log('error', 'undefined parameter (plugins.post)');
                callback(null);
            }
        }
    
        // post Partial async
        self.postPartialAsync = function (data, url, callback) {");
            WriteLiteral(@"
            if (typeof data != 'undefined' && typeof url != 'undefined') {
                try {
                    var xhr = $.ajax({
                        type: ""POST"",
                        url: url,
                        dataType: 'text',
                        beforeSend: function (xhr) { // for ASP.NET auto deserialization
                            xhr.setRequestHeader(""Content-type"", ""application/json"");
                        },
                        data: JSON.stringify(data),
                        statusCode: {
                            401: function () {
                                location.reload();
                            }
                        },
                        success: function (res, textStatus, xhr) {
                            // clean list
                            //cleanPartialList();
    
                            // callback
                            callback(res);
                        },
                        error");
            WriteLiteral(@": function (xhr, textStatus, err) {
                            // clean list
                            //cleanPartialList();
    
                            // callback
                            callback(null);
                        }
                    });
    
                    // clean list and push in new xhr
                    //cleanPartialList();
                    //self.partialXHRList.push(xhr);
                } catch (err) {
                    //console.log(err);
                    callback(null);
                }
            }
            else {
                console.log('error', 'undefined parameter (plugins.post)');
                callback(null);
            }
        }
    
        // FormData Post
        self.postFormData = function (data, url, callback) {
            if (typeof data != 'undefined' && typeof url != 'undefined') {
                try {
                    // enable loader
                    //self.loaderWidget = _core.getService(");
            WriteLiteral(@"'Loading').Service;
                    //self.loaderWidget.enableBlur(self.divClass);
    
                    $.ajax({
                        type: ""POST"",
                        url: url,
                        //processData: true,
                        processData: false,
                        contentType: false,
                        data: data,
                        //beforeSend: function (xhr) { // for ASP.NET auto deserialization
                        //    xhr.setRequestHeader(""Content-type"", ""multipart/form-data"");
                        //},
                        statusCode: {
                            401: function () {
                                location.reload();
                            }
                        },
                        success: function (res, textStatus, xhr) {
                            callback(res);
                        },
                        error: function (xhr, textStatus, err) {
                            consol");
            WriteLiteral(@"e.log('error', err.responseText);
                            callback(null);
                        }
                    });
                } catch (err) {
                    //console.log(err);
                    callback(null);
                }
            }
            else {
                console.log('error', 'undefined parameter (plugins.post)');
                callback(null);
            }
        }
        
    
        // clean partial list
        function cleanPartialList() {
            for (var i in self.partialXHRList) {
                self.partialXHRList[i].abort();
            }
    
            partialXHRList = [];
        }
    }
    /************************/
});
</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
